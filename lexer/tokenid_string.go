// Code generated by "stringer -type=TokenId"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INVALID-0]
	_ = x[EOF-1]
	_ = x[LF-2]
	_ = x[IDENTIFIER-3]
	_ = x[NUMBER-4]
	_ = x[STRING-5]
	_ = x[CHAR-6]
	_ = x[PLUS-7]
	_ = x[MINUS-8]
	_ = x[ASTERISK-9]
	_ = x[SLASH-10]
	_ = x[EQUALS-11]
	_ = x[COLON-12]
	_ = x[COMMA-13]
	_ = x[OPEN_PAREN-14]
	_ = x[CLOSE_PAREN-15]
	_ = x[OPEN_BRACE-16]
	_ = x[CLOSE_BRACE-17]
	_ = x[OPEN_BRACKET-18]
	_ = x[CLOSE_BRACKET-19]
	_ = x[COLON_EQUALS-20]
	_ = x[EXCLAMATION-21]
	_ = x[EQUALS_EQUALS-22]
	_ = x[EXCLAMATION_EQUALS-23]
	_ = x[PLUS_EQUALS-24]
	_ = x[MINUS_EQUALS-25]
	_ = x[ASTERISK_EQUALS-26]
	_ = x[SLASH_EQUALS-27]
	_ = x[PLUS_PLUS-28]
	_ = x[MINUS_MINUS-29]
	_ = x[CIRCUMFLEX-30]
	_ = x[PIPE-31]
	_ = x[PIPE_PIPE-32]
	_ = x[AND-33]
	_ = x[AND_AND-34]
	_ = x[DOT-35]
	_ = x[DOT_DOT_DOT-36]
	_ = x[LESS_THAN-37]
	_ = x[GREATER_THAN-38]
	_ = x[LESS_THAN_EQUALS-39]
	_ = x[GREATER_THAN_EQUALS-40]
	_ = x[IF-41]
	_ = x[ELSE-42]
	_ = x[RETURN-43]
	_ = x[FOR-44]
	_ = x[CONTINUE-45]
	_ = x[BREAK-46]
	_ = x[FN-47]
	_ = x[NEW-48]
}

const _TokenId_name = "INVALIDEOFLFIDENTIFIERNUMBERSTRINGCHARPLUSMINUSASTERISKSLASHEQUALSCOLONCOMMAOPEN_PARENCLOSE_PARENOPEN_BRACECLOSE_BRACEOPEN_BRACKETCLOSE_BRACKETCOLON_EQUALSEXCLAMATIONEQUALS_EQUALSEXCLAMATION_EQUALSPLUS_EQUALSMINUS_EQUALSASTERISK_EQUALSSLASH_EQUALSPLUS_PLUSMINUS_MINUSCIRCUMFLEXPIPEPIPE_PIPEANDAND_ANDDOTDOT_DOT_DOTLESS_THANGREATER_THANLESS_THAN_EQUALSGREATER_THAN_EQUALSIFELSERETURNFORCONTINUEBREAKFNNEW"

var _TokenId_index = [...]uint16{0, 7, 10, 12, 22, 28, 34, 38, 42, 47, 55, 60, 66, 71, 76, 86, 97, 107, 118, 130, 143, 155, 166, 179, 197, 208, 220, 235, 247, 256, 267, 277, 281, 290, 293, 300, 303, 314, 323, 335, 351, 370, 372, 376, 382, 385, 393, 398, 400, 403}

func (i TokenId) String() string {
	if i < 0 || i >= TokenId(len(_TokenId_index)-1) {
		return "TokenId(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenId_name[_TokenId_index[i]:_TokenId_index[i+1]]
}
